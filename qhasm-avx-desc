#!/bin/sh

echo ':name:reg256:%ymm0:%ymm1:%ymm2:%ymm3:%ymm4:%ymm5:%ymm6:%ymm7:%ymm8:%ymm9:%ymm10:%ymm11:%ymm12:%ymm13:%ymm14:%ymm15:'
echo 'new r:>r=reg256:'
echo 'free r:<r=reg256:'
echo 'reg256 r:var/r=reg256:'
echo 'assign ymm0 to r:<r=reg256#1:'
echo 'assign ymm1 to r:<r=reg256#2:'
echo 'assign ymm2 to r:<r=reg256#3:'
echo 'assign ymm3 to r:<r=reg256#4:'
echo 'assign ymm4 to r:<r=reg256#5:'
echo 'assign ymm5 to r:<r=reg256#6:'
echo 'assign ymm6 to r:<r=reg256#7:'
echo 'assign ymm7 to r:<r=reg256#8:'
echo 'assign ymm8 to r:<r=reg256#9:'
echo 'assign ymm9 to r:<r=reg256#10:'
echo 'assign ymm10 to r:<r=reg256#11:'
echo 'assign ymm11 to r:<r=reg256#12:'
echo 'assign ymm12 to r:<r=reg256#13:'
echo 'assign ymm13 to r:<r=reg256#14:'
echo 'assign ymm14 to r:<r=reg256#15:'
echo 'assign ymm15 to r:<r=reg256#16:'

echo 'r = mem128[t + n] x2:>r=reg256:<t=int64:#n:asm/vbroadcasti128 #n(<t), >r'
echo 'vzeroupper:asm/vzeroupper:'
echo 'r = s & mem256[t + n]:>r=reg256:<s=reg256:<t=int64:#n:asm/vpand #n(<t),<s,>r:'
echo 'r = s ^ mem256[t + n]:>r=reg256:<s=reg256:<t=int64:#n:asm/vpxor #n(<t),<s,>r:'
echo 'r = 0:>r=reg256:asm/vpxor >r,>r,>r:'
echo 'r ^= s:inplace>r=reg256:<r=reg256:<s=reg256:asm/vpxor <s,<r,<r:'
echo 'r &= s:inplace>r=reg256:<r=reg256:<s=reg256:asm/vpand <s,<r,<r:'
echo 'r &= ~s:inplace>r=reg256:<r=reg256:<s=reg256:asm/vpandn <r,<s,<r:'
echo 'r |= s:inplace>r=reg256:<r=reg256:<s=reg256:asm/vpor  <s,<r,<r:'
echo 'r ^= n:inplace>r=reg256:<r=reg256:#n:asm/vpxor #n,<r,<r:'
echo 'r &= n:inplace>r=reg256:<r=reg256:#n:asm/vpand #n,<r,<r:'
echo 'r |= n:inplace>r=reg256:<r=reg256:#n:asm/vpor  #n,<r,<r:'
echo 'r ^= mem256[s + n]:inplace>r=reg256:<r=reg256:<s=int64:#n:asm/vpxor #n(<s),<r,<r:'
echo 'r &= mem256[s + n]:inplace>r=reg256:<r=reg256:<s=int64:#n:asm/vpand #n(<s),<r,<r:'
echo 'r |= mem256[s + n]:inplace>r=reg256:<r=reg256:<s=int64:#n:asm/vpor  #n(<s),<r,<r:'
echo 'r = s ^ t:>r=reg256:<s=reg256:<t=reg256:asm/vpxor <s,<t,>r:'
echo 'r = s & t:>r=reg256:<s=reg256:<t=reg256:asm/vpand <s,<t,>r:'
echo 'r = s & ~t:>r=reg256:<s=reg256:<t=reg256:asm/vpandn <t,<s,>r:'
echo 'r = s | t:>r=reg256:<s=reg256:<t=reg256:asm/vpor  <s,<t,>r:'
echo 'r = s ^ n:>r=reg256:<s=reg256:#n:asm/vpxor #n(%rip),<s,>r:'
echo 'r = s & n:>r=reg256:<s=reg256:#n:asm/vpand #n(%rip),<s,>r:'
echo 'r = s | n:>r=reg256:<s=reg256:#n:asm/vpor  #n(%rip),<s,>r:'
echo '8x r = s unsigned>> n:>r=reg256:<s=reg256:#n:asm/vpsrlw $#n,<s,>r:'
echo '8x r = s << n:>r=reg256:<s=reg256:#n:asm/vpsllw $#n,<s,>r:'
echo 'r = mem256[s + n]:>r=reg256:<s=int64:#n:asm/vmovupd   #n(<s),>r:'
echo 'r = mem256[s - n]:>r=reg256:<s=int64:#n:asm/vmovupd   -#n(<s),>r:'
echo 'mem256[s + n] = r:<r=reg256:<s=int64:#n:asm/vmovupd   <r,#n(<s):'
echo 'mem256[s - n] = r:<r=reg256:<s=int64:#n:asm/vmovupd   <r,-#n(<s):'
echo 'r aligned= mem256[s + n]:>r=reg256:<s=int64:#n:asm/vmovapd   #n(<s),>r:'
echo 'r aligned= mem256[s - n]:>r=reg256:<s=int64:#n:asm/vmovapd   -#n(<s),>r:'
echo 'mem256[s + n] aligned= r:<r=reg256:<s=int64:#n:asm/vmovapd   <r,#n(<s):'
echo 'mem256[s - n] aligned= r:<r=reg256:<s=int64:#n:asm/vmovapd   <r,-#n(<s):'
echo 'r = s:>r=reg256:<s=stack256:asm/vmovapd <s,>r:'
echo 'r = s:>r=stack256:<s=reg256:asm/vmovapd <s,>r:'

echo 'r = mem256[&s+0]:>r=reg256:<s=stack1280:asm/vmovupd <s,>r:'
echo 'r = mem256[&s+8]:>r=reg256:<s=stack1280:asm/vmovupd !offset8;<s,>r:'
echo 'r = mem256[&s+16]:>r=reg256:<s=stack1280:asm/vmovupd !offset16;<s,>r:'
echo 'r = mem256[&s+24]:>r=reg256:<s=stack1280:asm/vmovupd !offset24;<s,>r:'
echo 'r = mem256[&s+32]:>r=reg256:<s=stack1280:asm/vmovupd !offset32;<s,>r:'
echo 'r = mem256[&s+40]:>r=reg256:<s=stack1280:asm/vmovupd !offset40;<s,>r:'
echo 'r = mem256[&s+48]:>r=reg256:<s=stack1280:asm/vmovupd !offset48;<s,>r:'
echo 'r = mem256[&s+56]:>r=reg256:<s=stack1280:asm/vmovupd !offset56;<s,>r:'
echo 'r = mem256[&s+64]:>r=reg256:<s=stack1280:asm/vmovupd !offset64;<s,>r:'
echo 'r = mem256[&s+72]:>r=reg256:<s=stack1280:asm/vmovupd !offset72;<s,>r:'
echo 'r = mem256[&s+80]:>r=reg256:<s=stack1280:asm/vmovupd !offset80;<s,>r:'
echo 'r = mem256[&s+88]:>r=reg256:<s=stack1280:asm/vmovupd !offset88;<s,>r:'
echo 'r = mem256[&s+96]:>r=reg256:<s=stack1280:asm/vmovupd !offset96;<s,>r:'
echo 'r = mem256[&s+104]:>r=reg256:<s=stack1280:asm/vmovupd !offset104;<s,>r:'
echo 'r = mem256[&s+112]:>r=reg256:<s=stack1280:asm/vmovupd !offset112;<s,>r:'
echo 'r = mem256[&s+120]:>r=reg256:<s=stack1280:asm/vmovupd !offset120;<s,>r:'
echo 'r = mem256[&s+128]:>r=reg256:<s=stack1280:asm/vmovupd !offset128;<s,>r:'

echo 'r = mem128[&s+0],0:>r=reg256:<s=stack1280:asm/vmovupd <s,>r%128:'
echo 'r = mem128[&s+8],0:>r=reg256:<s=stack1280:asm/vmovupd !offset8;<s,>r%128:'
echo 'r = mem128[&s+16],0:>r=reg256:<s=stack1280:asm/vmovupd !offset16;<s,>r%128:'
echo 'r = mem128[&s+24],0:>r=reg256:<s=stack1280:asm/vmovupd !offset24;<s,>r%128:'
echo 'r = mem128[&s+32],0:>r=reg256:<s=stack1280:asm/vmovupd !offset32;<s,>r%128:'
echo 'r = mem128[&s+40],0:>r=reg256:<s=stack1280:asm/vmovupd !offset40;<s,>r%128:'
echo 'r = mem128[&s+48],0:>r=reg256:<s=stack1280:asm/vmovupd !offset48;<s,>r%128:'
echo 'r = mem128[&s+56],0:>r=reg256:<s=stack1280:asm/vmovupd !offset56;<s,>r%128:'
echo 'r = mem128[&s+64],0:>r=reg256:<s=stack1280:asm/vmovupd !offset64;<s,>r%128:'
echo 'r = mem128[&s+72],0:>r=reg256:<s=stack1280:asm/vmovupd !offset72;<s,>r%128:'
echo 'r = mem128[&s+80],0:>r=reg256:<s=stack1280:asm/vmovupd !offset80;<s,>r%128:'
echo 'r = mem128[&s+88],0:>r=reg256:<s=stack1280:asm/vmovupd !offset88;<s,>r%128:'
echo 'r = mem128[&s+96],0:>r=reg256:<s=stack1280:asm/vmovupd !offset96;<s,>r%128:'
echo 'r = mem128[&s+104],0:>r=reg256:<s=stack1280:asm/vmovupd !offset104;<s,>r%128:'
echo 'r = mem128[&s+112],0:>r=reg256:<s=stack1280:asm/vmovupd !offset112;<s,>r%128:'
echo 'r = mem128[&s+120],0:>r=reg256:<s=stack1280:asm/vmovupd !offset120;<s,>r%128:'
echo 'r = mem128[&s+128],0:>r=reg256:<s=stack1280:asm/vmovupd !offset128;<s,>r%128:'

echo 'mem256[&s+0] = r:<r=reg256:<s=stack1280:inplace>s=stack1280:asm/vmovupd <r,!offset0;<s:'
echo 'mem256[&s+8] = r:<r=reg256:<s=stack1280:inplace>s=stack1280:asm/vmovupd <r,!offset8;<s:'
echo 'mem256[&s+16] = r:<r=reg256:<s=stack1280:inplace>s=stack1280:asm/vmovupd <r,!offset16;<s:'
echo 'mem256[&s+24] = r:<r=reg256:<s=stack1280:inplace>s=stack1280:asm/vmovupd <r,!offset24;<s:'
echo 'mem256[&s+32] = r:<r=reg256:<s=stack1280:inplace>s=stack1280:asm/vmovupd <r,!offset32;<s:'
echo 'mem256[&s+40] = r:<r=reg256:<s=stack1280:inplace>s=stack1280:asm/vmovupd <r,!offset40;<s:'
echo 'mem256[&s+48] = r:<r=reg256:<s=stack1280:inplace>s=stack1280:asm/vmovupd <r,!offset48;<s:'
echo 'mem256[&s+56] = r:<r=reg256:<s=stack1280:inplace>s=stack1280:asm/vmovupd <r,!offset56;<s:'
echo 'mem256[&s+64] = r:<r=reg256:<s=stack1280:inplace>s=stack1280:asm/vmovupd <r,!offset64;<s:'
echo 'mem256[&s+72] = r:<r=reg256:<s=stack1280:inplace>s=stack1280:asm/vmovupd <r,!offset72;<s:'
echo 'mem256[&s+80] = r:<r=reg256:<s=stack1280:inplace>s=stack1280:asm/vmovupd <r,!offset80;<s:'
echo 'mem256[&s+88] = r:<r=reg256:<s=stack1280:inplace>s=stack1280:asm/vmovupd <r,!offset88;<s:'
echo 'mem256[&s+96] = r:<r=reg256:<s=stack1280:inplace>s=stack1280:asm/vmovupd <r,!offset96;<s:'
echo 'mem256[&s+104] = r:<r=reg256:<s=stack1280:inplace>s=stack1280:asm/vmovupd <r,!offset104;<s:'
echo 'mem256[&s+112] = r:<r=reg256:<s=stack1280:inplace>s=stack1280:asm/vmovupd <r,!offset112;<s:'
echo 'mem256[&s+120] = r:<r=reg256:<s=stack1280:inplace>s=stack1280:asm/vmovupd <r,!offset120;<s:'
echo 'mem256[&s+128] = r:<r=reg256:<s=stack1280:inplace>s=stack1280:asm/vmovupd <r,!offset128;<s:'

echo 'inplace s[0] = r:<r=int64:<s=stack256:inplace>s=stack256:asm/movq <r,<s:'
echo 'inplace s[1] = r:<r=int64:<s=stack256:inplace>s=stack256:asm/movq <r,!shift8<s:'
echo 'inplace s[2] = r:<r=int64:<s=stack256:inplace>s=stack256:asm/movq <r,!shift16<s:'
echo 'inplace s[3] = r:<r=int64:<s=stack256:inplace>s=stack256:asm/movq <r,!shift24<s:'
echo 'r = s[0]:>r=int64:<s=stack256:asm/movq <s,>r:'
echo 'r = s[1]:>r=int64:<s=stack256:asm/movq !shift8<s,>r:'
echo 'r = s[2]:>r=int64:<s=stack256:asm/movq !shift16<s,>r:'
echo 'r = s[3]:>r=int64:<s=stack256:asm/movq !shift24<s,>r:'
echo 'r += s[0]:<r=int64:inplace>r=int64:<s=stack256:asm/addq <s,<r:'
echo 'r += s[1]:<r=int64:inplace>r=int64:<s=stack256:asm/addq !shift8<s,<r:'
echo 'r += s[2]:<r=int64:inplace>r=int64:<s=stack256:asm/addq !shift16<s,<r:'
echo 'r += s[3]:<r=int64:inplace>r=int64:<s=stack256:asm/addq !shift24<s,<r:'
echo 'r -= s[0]:<r=int64:inplace>r=int64:<s=stack256:asm/subq <s,<r:'
echo 'r -= s[1]:<r=int64:inplace>r=int64:<s=stack256:asm/subq !shift8<s,<r:'
echo 'r -= s[2]:<r=int64:inplace>r=int64:<s=stack256:asm/subq !shift16<s,<r:'
echo 'r -= s[3]:<r=int64:inplace>r=int64:<s=stack256:asm/subq !shift24<s,<r:'
echo 'r *= s[0]:<r=int64:inplace>r=int64:<s=stack256:asm/imulq <s,<r:'
echo 'r *= s[1]:<r=int64:inplace>r=int64:<s=stack256:asm/imulq !shift8<s,<r:'
echo 'r *= s[2]:<r=int64:inplace>r=int64:<s=stack256:asm/imulq !shift16<s,<r:'
echo 'r *= s[3]:<r=int64:inplace>r=int64:<s=stack256:asm/imulq !shift24<s,<r:'
echo 'r &= s[0]:<r=int64:inplace>r=int64:<s=stack256:asm/andq <s,<r:'
echo 'r &= s[1]:<r=int64:inplace>r=int64:<s=stack256:asm/andq !shift8<s,<r:'
echo 'r &= s[2]:<r=int64:inplace>r=int64:<s=stack256:asm/andq !shift16<s,<r:'
echo 'r &= s[3]:<r=int64:inplace>r=int64:<s=stack256:asm/andq !shift24<s,<r:'
echo 'r |= s[0]:<r=int64:inplace>r=int64:<s=stack256:asm/orq <s,<r:'
echo 'r |= s[1]:<r=int64:inplace>r=int64:<s=stack256:asm/orq !shift8<s,<r:'
echo 'r |= s[2]:<r=int64:inplace>r=int64:<s=stack256:asm/orq !shift16<s,<r:'
echo 'r |= s[3]:<r=int64:inplace>r=int64:<s=stack256:asm/orq !shift24<s,<r:'
echo 'r ^= s[0]:<r=int64:inplace>r=int64:<s=stack256:asm/xorq <s,<r:'
echo 'r ^= s[1]:<r=int64:inplace>r=int64:<s=stack256:asm/xorq !shift8<s,<r:'
echo 'r ^= s[2]:<r=int64:inplace>r=int64:<s=stack256:asm/xorq !shift16<s,<r:'
echo 'r ^= s[3]:<r=int64:inplace>r=int64:<s=stack256:asm/xorq !shift24<s,<r:'

echo 'r = s[0] if unsigned<:inplace>r=int64:<r=int64:<s=stack256:<?unsigned<:asm/cmovb <s,<r:'
echo 'r = s[0] if !unsigned<:inplace>r=int64:<r=int64:<s=stack256:<?unsigned<:asm/cmovae <s,<r:'
echo 'r = s[0] if unsigned>:inplace>r=int64:<r=int64:<s=stack256:<?unsigned<:asm/cmova <s,<r:'
echo 'r = s[0] if !unsigned>:inplace>r=int64:<r=int64:<s=stack256:<?unsigned<:asm/cmovbe <s,<r:'
echo 'r = s[0] if carry:inplace>r=int64:<r=int64:<s=stack256:<?carry:asm/cmovc <s,<r:'
echo 'r = s[0] if !carry:inplace>r=int64:<r=int64:<s=stack256:<?carry:asm/cmovae <s,<r:'
echo 'r = s[0] if signed<:inplace>r=int64:<r=int64:<s=stack256:<?signed<:asm/cmovl <s,<r:'
echo 'r = s[0] if !signed<:inplace>r=int64:<r=int64:<s=stack256:<?signed<:asm/cmovge <s,<r:'
echo 'r = s[0] if signed>:inplace>r=int64:<r=int64:<s=stack256:<?signed>:asm/cmovg <s,<r:'
echo 'r = s[0] if !signed>:inplace>r=int64:<r=int64:<s=stack256:<?signed>:asm/cmovle <s,<r:'
echo 'r = s[0] if =:inplace>r=int64:<r=int64:<s=stack256:<?=:asm/cmove <s,<r:'
echo 'r = s[0] if !=:inplace>r=int64:<r=int64:<s=stack256:<?=:asm/cmovne <s,<r:'
echo 'r = s[1] if unsigned<:inplace>r=int64:<r=int64:<s=stack256:<?unsigned<:asm/cmovb !shift8<s,<r:'
echo 'r = s[1] if !unsigned<:inplace>r=int64:<r=int64:<s=stack256:<?unsigned<:asm/cmovae !shift8<s,<r:'
echo 'r = s[1] if unsigned>:inplace>r=int64:<r=int64:<s=stack256:<?unsigned<:asm/cmova !shift8<s,<r:'
echo 'r = s[1] if !unsigned>:inplace>r=int64:<r=int64:<s=stack256:<?unsigned<:asm/cmovbe !shift8<s,<r:'
echo 'r = s[1] if carry:inplace>r=int64:<r=int64:<s=stack256:<?carry:asm/cmovc !shift8<s,<r:'
echo 'r = s[1] if !carry:inplace>r=int64:<r=int64:<s=stack256:<?carry:asm/cmovae !shift8<s,<r:'
echo 'r = s[1] if signed<:inplace>r=int64:<r=int64:<s=stack256:<?signed<:asm/cmovl !shift8<s,<r:'
echo 'r = s[1] if !signed<:inplace>r=int64:<r=int64:<s=stack256:<?signed<:asm/cmovge !shift8<s,<r:'
echo 'r = s[1] if signed>:inplace>r=int64:<r=int64:<s=stack256:<?signed>:asm/cmovg !shift8<s,<r:'
echo 'r = s[1] if !signed>:inplace>r=int64:<r=int64:<s=stack256:<?signed>:asm/cmovle !shift8<s,<r:'
echo 'r = s[1] if =:inplace>r=int64:<r=int64:<s=stack256:<?=:asm/cmove !shift8<s,<r:'
echo 'r = s[1] if !=:inplace>r=int64:<r=int64:<s=stack256:<?=:asm/cmovne !shift8<s,<r:'
echo 'r = s[2] if unsigned<:inplace>r=int64:<r=int64:<s=stack256:<?unsigned<:asm/cmovb !shift16<s,<r:'
echo 'r = s[2] if !unsigned<:inplace>r=int64:<r=int64:<s=stack256:<?unsigned<:asm/cmovae !shift16<s,<r:'
echo 'r = s[2] if unsigned>:inplace>r=int64:<r=int64:<s=stack256:<?unsigned<:asm/cmova !shift16<s,<r:'
echo 'r = s[2] if !unsigned>:inplace>r=int64:<r=int64:<s=stack256:<?unsigned<:asm/cmovbe !shift16<s,<r:'
echo 'r = s[2] if carry:inplace>r=int64:<r=int64:<s=stack256:<?carry:asm/cmovc !shift16<s,<r:'
echo 'r = s[2] if !carry:inplace>r=int64:<r=int64:<s=stack256:<?carry:asm/cmovae !shift16<s,<r:'
echo 'r = s[2] if signed<:inplace>r=int64:<r=int64:<s=stack256:<?signed<:asm/cmovl !shift16<s,<r:'
echo 'r = s[2] if !signed<:inplace>r=int64:<r=int64:<s=stack256:<?signed<:asm/cmovge !shift16<s,<r:'
echo 'r = s[2] if signed>:inplace>r=int64:<r=int64:<s=stack256:<?signed>:asm/cmovg !shift16<s,<r:'
echo 'r = s[2] if !signed>:inplace>r=int64:<r=int64:<s=stack256:<?signed>:asm/cmovle !shift16<s,<r:'
echo 'r = s[2] if =:inplace>r=int64:<r=int64:<s=stack256:<?=:asm/cmove !shift16<s,<r:'
echo 'r = s[2] if !=:inplace>r=int64:<r=int64:<s=stack256:<?=:asm/cmovne !shift16<s,<r:'
echo 'r = s[3] if unsigned<:inplace>r=int64:<r=int64:<s=stack256:<?unsigned<:asm/cmovb !shift24<s,<r:'
echo 'r = s[3] if !unsigned<:inplace>r=int64:<r=int64:<s=stack256:<?unsigned<:asm/cmovae !shift24<s,<r:'
echo 'r = s[3] if unsigned>:inplace>r=int64:<r=int64:<s=stack256:<?unsigned<:asm/cmova !shift24<s,<r:'
echo 'r = s[3] if !unsigned>:inplace>r=int64:<r=int64:<s=stack256:<?unsigned<:asm/cmovbe !shift24<s,<r:'
echo 'r = s[3] if carry:inplace>r=int64:<r=int64:<s=stack256:<?carry:asm/cmovc !shift24<s,<r:'
echo 'r = s[3] if !carry:inplace>r=int64:<r=int64:<s=stack256:<?carry:asm/cmovae !shift24<s,<r:'
echo 'r = s[3] if signed<:inplace>r=int64:<r=int64:<s=stack256:<?signed<:asm/cmovl !shift24<s,<r:'
echo 'r = s[3] if !signed<:inplace>r=int64:<r=int64:<s=stack256:<?signed<:asm/cmovge !shift24<s,<r:'
echo 'r = s[3] if signed>:inplace>r=int64:<r=int64:<s=stack256:<?signed>:asm/cmovg !shift24<s,<r:'
echo 'r = s[3] if !signed>:inplace>r=int64:<r=int64:<s=stack256:<?signed>:asm/cmovle !shift24<s,<r:'
echo 'r = s[3] if =:inplace>r=int64:<r=int64:<s=stack256:<?=:asm/cmove !shift24<s,<r:'
echo 'r = s[3] if !=:inplace>r=int64:<r=int64:<s=stack256:<?=:asm/cmovne !shift24<s,<r:'


echo 'r = s,r[1],0,0:inplace>r=reg256:<r=reg256:<s=int64:asm/vpinsrq $0x0,<s,<r%128,<r%128:'
echo 'r = r[0],s,0,0:inplace>r=reg256:<r=reg256:<s=int64:asm/vpinsrq $0x1,<s,<r%128,<r%128:'

echo 'r[0] = mem128[s + n]:inplace>r=reg256:<r=reg256:<s=int64:#n:asm/vinsertf128 $0x0,#n(<s),<r,<r:'
echo 'r[1] = mem128[s + n]:inplace>r=reg256:<r=reg256:<s=int64:#n:asm/vinsertf128 $0x1,#n(<s),<r,<r:'
echo 'clear r:>r=reg256:asm/vxorpd >r, >r, >r'

echo '4x r = s + t:>r=reg256:<s=reg256:<t=stack256:asm/vpaddq <t,<s,>r:'
echo '4x r = s + t:>r=reg256:<s=reg256:<t=reg256:asm/vpaddq <t,<s,>r:'
echo '4x r = s + t:>r=reg256:<s=stack256:<t=reg256:asm/vpaddq <t,<s,>r:'
echo '4x r = s - t:>r=reg256:<s=reg256:<t=stack256:asm/vpsubq <t,<s,>r:'
echo '4x r = s - t:>r=reg256:<s=reg256:<t=reg256:asm/vpsubq <t,<s,>r:'
echo '4x r = s - t:>r=reg256:<s=stack256:<t=reg256:asm/vpsubq <t,<s,>r:'
echo '4x r = s unsigned>> n:>r=reg256:<s=reg256:#n:asm/vpsrlq $#n,<s,>r:'
echo '4x r = s unsigned>> n:>r=reg256:<s=stack256:#n:asm/vpsrlq $#n,<s,>r:'
echo '4x r = s << n:>r=reg256:<s=reg256:#n:asm/vpsllq $#n,<s,>r:'
echo '4x r = s << n:>r=reg256:<s=stack256:#n:asm/vpsllq $#n,<s,>r:'

echo '4x r = s + mem256[t + n]:>r=reg256:<s=reg256:<t=int64:#n:asm/vpaddq  #n(<t),<s,>r:'
echo '4x r = s + mem256[&t + n]:>r=reg256:<s=reg256:<t=stack1280:#n:asm/vpaddq  !offset#n;<t,<s,>r:'

echo '2x,0 r = s unsigned>> n:>r=reg256:<s=reg256:#n:asm/vpsrlq $#n,<s%128,>r%128:'
echo '2x,0 r = s << n:>r=reg256:<s=reg256:#n:asm/vpsllq $#n,<s%128,>r%128:'
echo '2x,0 r = s + t:>r=reg256:<s=reg256:<t=reg256:asm/vpaddq <s%128,<t%128,>r%128:'

echo '1x,0 r = s ^ t:>r=reg256:<s=reg256:<t=reg256:asm/vpxor <s%128,<t%128,>r%128:'
echo '1x,0 r ^= s:inplace>r=reg256:<r=reg256:<s=reg256:asm/vpxor <s%128,<r%128,<r%128:'

# XXX: decide how to declare int vs. fp; clean up syntax vs. below
echo 'r = s[1],t[0]:>r=reg256:<s=reg256:<t=reg256:asm/vperm2i128 $0x21,<t,<s,>r:'
echo 'r = s[2,3,0,1]:>r=reg256:<s=reg256:asm/vpermq $0x4e,<s,>r:'



# AVX double-precision arithmetic
echo '4x r = approx s * t:>r=reg256:<s=reg256:<t=reg256:asm/vmulpd <s,<t,>r:'
echo '4x r = approx s * mem256[t + n]:>r=reg256:<s=reg256:<t=int64:#n:asm/vmulpd #n(<t),<s,>r:'
echo '4x r = approx s * mem256[t - n]:>r=reg256:<s=reg256:<t=int64:#n:asm/vmulpd -#n(<t),<s,>r:'
echo '4x r = approx s * mem256[n]:>r=reg256:<s=reg256:#n:asm/vmulpd #n,<s,>r:'
echo '4x r = approx s * t:>r=reg256:<s=reg256:<t=stack256:#n:asm/vmulpd <t,<s,>r:'
echo '4x r approx*= s:>r=reg256:<s=reg256:<r=reg256:asm/vmulpd <s,<r,>r:'
echo '4x r approx*= mem256[t + n]:>r=reg256:<r=reg256:<t=int64:#n:asm/vmulpd #n(<t),<r,>r:'
echo '4x r approx*= mem256[t - n]:>r=reg256:<r=reg256:<t=int64:#n:asm/vmulpd -#n(<t),<r,>r:'
echo '4x r approx*= mem256[n]:>r=reg256:<r=reg256:#n:asm/vmulpd #n,<r,>r:'
echo '4x r approx*= s:>r=reg256:<r=reg256:<s=stack256:#n:asm/vmulpd <s,<r,>r:'

echo '4x r = s if c<0 else t:>r=reg256:<s=reg256:<t=reg256:<c=reg256:asm/vblendvpd <c,<s,<t,>r:'

echo '4x r approx+= s * t:inplace>r=reg256:<r=reg256:<s=reg256:<t=reg256:asm/vfmadd231pd <s,<t,<r:'
echo '4x r approx+= s * mem256[t + n]:inplace>r=reg256:<r=reg256:<s=reg256:<t=int64:#n:asm/vfmadd231pd #n(<t),<s,<r:'
echo '4x r approx+= s * mem256[t - n]:inplace>r=reg256:<r=reg256:<s=reg256:<t=int64:#n:asm/vfmadd231pd -#n(<t),<s,<r:'
echo '4x r approx-= s * t:inplace>r=reg256:<r=reg256:<s=reg256:<t=reg256:asm/vfnmadd231pd <s,<t,<r:'
echo '4x r approx-= s * mem256[t + n]:inplace>r=reg256:<r=reg256:<s=reg256:<t=int64:#n:asm/vfnmadd231pd #n(<t),<s,<r:'
echo '4x r approx-= s * mem256[t - n]:inplace>r=reg256:<r=reg256:<s=reg256:<t=int64:#n:asm/vfnmadd231pd -#n(<t),<s,<r:'

echo '4x r = approx s + t:>r=reg256:<s=reg256:<t=reg256:asm/vaddpd <s,<t,>r:'
echo '4x r = approx s + mem256[t + n]:>r=reg256:<s=reg256:<t=int64:#n:asm/vaddpd #n(<t),<s,>r:'
echo '4x r = approx s + mem256[t - n]:>r=reg256:<s=reg256:<t=int64:#n:asm/vaddpd -#n(<t),<s,>r:'
echo '4x r = approx s + mem256[n]:>r=reg256:<s=reg256:#n:asm/vaddpd #n,<s,>r:'
echo '4x r = approx s + t:>r=reg256:<s=reg256:<t=stack256:#n:asm/vaddpd <t,<s,>r:'
echo '4x r approx+= s:>r=reg256:<s=reg256:<r=reg256:asm/vaddpd <s,<r,>r:'
echo '4x r approx+= mem256[t + n]:>r=reg256:<r=reg256:<t=int64:#n:asm/vaddpd #n(<t),<r,>r:'
echo '4x r approx+= mem256[t - n]:>r=reg256:<r=reg256:<t=int64:#n:asm/vaddpd -#n(<t),<r,>r:'
echo '4x r approx+= mem256[n]:>r=reg256:<r=reg256:#n:asm/vaddpd #n,<r,>r:'
echo '4x r approx+= s:>r=reg256:<r=reg256:<s=stack256:#n:asm/vaddpd <s,<r,>r:'

echo '4x r = approx s - t:>r=reg256:<s=reg256:<t=reg256:asm/vsubpd <t,<s,>r:'
echo '4x r = approx s - mem256[t + n]:>r=reg256:<s=reg256:<t=int64:#n:asm/vsubpd #n(<t),<s,>r:'
echo '4x r = approx s - mem256[t - n]:>r=reg256:<s=reg256:<t=int64:#n:asm/vsubpd -#n(<t),<s,>r:'
echo '4x r = approx s - mem256[n]:>r=reg256:<s=reg256:#n:asm/vsubpd #n,<s,>r:'
echo '4x r = approx s - t:>r=reg256:<s=reg256:<t=stack256:#n:asm/vsubpd <t,<s,>r:'
echo '4x r approx-= s:>r=reg256:<s=reg256:<r=reg256:asm/vsubpd <s,<r,>r:'
echo '4x r approx-= mem256[t + n]:>r=reg256:<r=reg256:<t=int64:#n:asm/vsubpd #n(<t),<r,>r:'
echo '4x r approx-= mem256[t - n]:>r=reg256:<r=reg256:<t=int64:#n:asm/vsubpd -#n(<t),<r,>r:'
echo '4x r approx-= mem256[n]:>r=reg256:<r=reg256:#n:asm/vsubpd #n,<r,>r:'
echo '4x r approx-= s:>r=reg256:<r=reg256:<s=stack256:#n:asm/vsubpd <s,<r,>r:'

echo 'r[0,1,2,3] = s[0]approx+s[1],t[0]approx+t[1],s[2]approx+s[3],t[2]approx+t[3]:>r=reg256:<s=reg256:<t=reg256:asm/vhaddpd <t,<s,>r:'
echo 'r[0,1,2,3] = s[0]approx-s[1],t[0]approx-t[1],s[2]approx-s[3],t[2]approx-t[3]:>r=reg256:<s=reg256:<t=reg256:asm/vhsubpd <t,<s,>r:'

echo 'r[0,1,2,3] approx= s[0]-t[0],s[1]+t[1],s[2]-t[2],s[3]+t[3]:>r=reg256:<s=reg256:<t=reg256:asm/vaddsubpd <t,<s,>r:'

echo 'r[0,1,2,3] = s[0,0,2,2]:>r=reg256:<s=reg256:asm/vpermilpd $0x0,<s,>r:'
echo 'r[0,1,2,3] = s[1,0,2,2]:>r=reg256:<s=reg256:asm/vpermilpd $0x1,<s,>r:'
echo 'r[0,1,2,3] = s[0,1,2,2]:>r=reg256:<s=reg256:asm/vpermilpd $0x2,<s,>r:'
echo 'r[0,1,2,3] = s[1,1,2,2]:>r=reg256:<s=reg256:asm/vpermilpd $0x3,<s,>r:'
echo 'r[0,1,2,3] = s[0,0,3,2]:>r=reg256:<s=reg256:asm/vpermilpd $0x4,<s,>r:'
echo 'r[0,1,2,3] = s[1,0,3,2]:>r=reg256:<s=reg256:asm/vpermilpd $0x5,<s,>r:'
echo 'r[0,1,2,3] = s[0,1,3,2]:>r=reg256:<s=reg256:asm/vpermilpd $0x6,<s,>r:'
echo 'r[0,1,2,3] = s[1,1,3,2]:>r=reg256:<s=reg256:asm/vpermilpd $0x7,<s,>r:'
echo 'r[0,1,2,3] = s[0,0,2,3]:>r=reg256:<s=reg256:asm/vpermilpd $0x8,<s,>r:'
echo 'r[0,1,2,3] = s[1,0,2,3]:>r=reg256:<s=reg256:asm/vpermilpd $0x9,<s,>r:'
echo 'r[0,1,2,3] = s[0,1,2,3]:>r=reg256:<s=reg256:asm/vpermilpd $0xa,<s,>r:'
echo 'r[0,1,2,3] = s[1,1,2,3]:>r=reg256:<s=reg256:asm/vpermilpd $0xb,<s,>r:'
echo 'r[0,1,2,3] = s[0,0,3,3]:>r=reg256:<s=reg256:asm/vpermilpd $0xc,<s,>r:'
echo 'r[0,1,2,3] = s[1,0,3,3]:>r=reg256:<s=reg256:asm/vpermilpd $0xd,<s,>r:'
echo 'r[0,1,2,3] = s[0,1,3,3]:>r=reg256:<s=reg256:asm/vpermilpd $0xe,<s,>r:'
echo 'r[0,1,2,3] = s[1,1,3,3]:>r=reg256:<s=reg256:asm/vpermilpd $0xf,<s,>r:'
echo 'r[0,1,2,3] = s[0,1],t[0,1]:>r=reg256:<s=reg256:<t=reg256:asm/vperm2f128 $0x20,<t,<s,>r:'
echo 'r[0,1,2,3] = s[0,1],t[2,3]:>r=reg256:<s=reg256:<t=reg256:asm/vperm2f128 $0x30,<t,<s,>r:'
echo 'r[0,1,2,3] = s[2,3],t[0,1]:>r=reg256:<s=reg256:<t=reg256:asm/vperm2f128 $0x21,<t,<s,>r:'
echo 'r[0,1,2,3] = s[2,3],t[2,3]:>r=reg256:<s=reg256:<t=reg256:asm/vperm2f128 $0x31,<t,<s,>r:'
echo 'r[0,1,2,3] = s[0]t[0]s[2]t[2]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0x0,<t,<s,>r:'
echo 'r[0,1,2,3] = s[1]t[0]s[2]t[2]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0x1,<t,<s,>r:'
echo 'r[0,1,2,3] = s[0]t[1]s[2]t[2]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0x2,<t,<s,>r:'
echo 'r[0,1,2,3] = s[1]t[1]s[2]t[2]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0x3,<t,<s,>r:'
echo 'r[0,1,2,3] = s[0]t[0]s[3]t[2]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0x4,<t,<s,>r:'
echo 'r[0,1,2,3] = s[1]t[0]s[3]t[2]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0x5,<t,<s,>r:'
echo 'r[0,1,2,3] = s[0]t[1]s[3]t[2]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0x6,<t,<s,>r:'
echo 'r[0,1,2,3] = s[1]t[1]s[3]t[2]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0x7,<t,<s,>r:'
echo 'r[0,1,2,3] = s[0]t[0]s[2]t[3]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0x8,<t,<s,>r:'
echo 'r[0,1,2,3] = s[1]t[0]s[2]t[3]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0x9,<t,<s,>r:'
echo 'r[0,1,2,3] = s[0]t[1]s[2]t[3]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0xa,<t,<s,>r:'
echo 'r[0,1,2,3] = s[1]t[1]s[2]t[3]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0xb,<t,<s,>r:'
echo 'r[0,1,2,3] = s[0]t[0]s[3]t[3]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0xc,<t,<s,>r:'
echo 'r[0,1,2,3] = s[1]t[0]s[3]t[3]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0xd,<t,<s,>r:'
echo 'r[0,1,2,3] = s[0]t[1]s[3]t[3]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0xe,<t,<s,>r:'
echo 'r[0,1,2,3] = s[1]t[1]s[3]t[3]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0xf,<t,<s,>r:'

echo '2x 16x r = s[t]:>r=reg256:<s=reg256:<t=reg256:asm/vpshufb <t,<s,>r:'

echo '4x r = round(s):>r=reg256:<s=reg256:asm/vroundpd $8,<s,>r:'
echo '4x r = floor(s):>r=reg256:<s=reg256:asm/vroundpd $9,<s,>r:'
echo '4x r = ceil(s):>r=reg256:<s=reg256:asm/vroundpd $10,<s,>r:'
echo '4x r = trunc(s):>r=reg256:<s=reg256:asm/vroundpd $11,<s,>r:'

echo 'r = s:>r=reg256:<s=reg256:asm/vmovapd <s,>r:'
echo 'r aligned= mem256[n]:>r=reg256:#n:asm/vmovapd #n,>r:'
echo 'r = mem256[n]:>r=reg256:#n:asm/vmovupd #n,>r:'
echo 'r aligned= s:>r=reg256:<s=stack256:asm/vmovapd <s,>r:'
echo 'r aligned= s:>r=stack256:<s=reg256:asm/vmovapd <s,>r:'
echo 'r = s,s,s,s:>r=reg256:<s=stack64:asm/vbroadcastsd <s,>r:'
echo 'r = mem64[s+n],mem64[s+n],mem64[s+n],mem64[s+n]:>r=reg256:<s=int64:#n:asm/vbroadcastsd #n(<s),>r:'

echo 'r = 4x s: >r=reg256:<s=stack64:asm/vpbroadcastq <s,>r:'
echo 'r = 4x s[0]: >r=reg256:<s=stack256:asm/vpbroadcastq <s,>r:'
echo 'r = 4x s[0]: >r=reg256:<s=reg256:asm/vpbroadcastq <s%128,>r:'
echo 'r = 4x mem64[s+n]: :>r=reg256:<s=int64:#n:asm/vpbroadcastq #n(<s),>r:'
echo 'r = 4x n: :>r=reg256:#n:asm/vpbroadcastq #n(%rip),>r:'
echo '4x r += s:inplace>r=reg256:<r=reg256:<s=reg256:asm/vpaddq <s,<r,<r:'
echo '4x r += s:inplace>r=reg256:<r=reg256:<s=stack256:asm/vpaddq <s,<r,<r:'
echo '4x r -= s:inplace>r=reg256:<r=reg256:<s=reg256:asm/vpsubq <s,<r,<r:'
echo '4x r -= s:inplace>r=reg256:<r=reg256:<s=stack256:asm/vpsubq <s,<r,<r:'
echo 'r ^= s:inplace>r=reg256:<r=reg256:<s=reg256:asm/vpxor <s,<r,<r:'
echo 'r ^= s:inplace>r=reg256:<r=reg256:<s=stack256:asm/vpxor <s,<r,<r:'
echo 'r &= s:inplace>r=reg256:<r=reg256:<s=reg256:asm/vpand <s,<r,<r:'
echo 'r &= s:inplace>r=reg256:<r=reg256:<s=stack256:asm/vpand <s,<r,<r:'
echo 'r |= s:inplace>r=reg256:<r=reg256:<s=reg256:asm/vpor <s,<r,<r:'
echo 'r |= s:inplace>r=reg256:<r=reg256:<s=stack256:asm/vpor <s,<r,<r:'
echo 'r &= ~s:inplace>r=reg256:<r=reg256:<s=reg256:asm/vpandn <s,<r,<r:'
echo 'r &= ~s:inplace>r=reg256:<r=reg256:<s=stack256:asm/vpandn <s,<r,<r:'
echo '4x r unsigned>>= n:inplace>r=reg256:<r=reg256:#n:asm/vpsrlq $#n,<r,<r:'
echo '4x r <<= n:inplace>r=reg256:<r=reg256:#n:asm/vpsllq $#n,<r,<r:'
echo '4x r += mem256[s + n]:inplace>r=reg256:<r=reg256:<s=reg256:#n:asm/vpaddq #n(<s),<r,<r:'

echo '4x r = int32 s * int32 t:>r=reg256:<s=reg256:<t=reg256:asm/vpmuldq <s,<t,>r:'
echo '4x r = int32 s * int32 t:>r=reg256:<s=reg256:<t=stack256:asm/vpmuldq <t,<s,>r:'
echo '4x r *= int32 s:inplace>r=reg256:<r=reg256:<s=reg256:asm/vpmuldq <s,<r,<r:'
echo 'r = s[0,0,2,2]:>r=reg256:<s=reg256:asm/vpermq $0xa0,<s,>r:'
echo 'r = s[0,0,2,2]:>r=reg256:<s=stack256:asm/vpermq $0xa0,<s,>r:'
echo 'r = s[0,0,1,1]:>r=reg256:<s=reg256:asm/vpermq $0x50,<s,>r:'
echo 'r = s[1,0]:>r=reg256:<s=reg256:asm/vpermq $0x4e,<s,>r:'
echo 'r = s[1,0]:>r=reg256:<s=stack256:asm/vpermq $0x4e,<s,>r:'
echo 'r = s[1,X,3,X]:>r=reg256:<s=reg256:asm/vpsrldq $0x8,<s,>r:'
echo 'r = s[1,X,3,X]:>r=reg256:<s=stack256:asm/vpsrldq $0x8,<s,>r:'
echo 'r = s[X,0,X,2]:>r=reg256:<s=reg256:asm/vpslldq $0x8,<s,>r:'
echo 'r = s[X,0,X,2]:>r=reg256:<s=stack256:asm/vpdlldq $0x8,<s,>r:'
echo '4x r = s + mem256[n]:>r=reg256:<s=reg256:#n:asm/vpaddq #n(%rip),<s,>r'
