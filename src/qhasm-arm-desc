#!/bin/bash



stackalign=''
[ x"$1" = xstackalign ] && stackalign=yes

# r13 is sp
# r15 is pc
echo ':name:int32:r0:r1:r2:r3:r4:r5:r6:r7:r8:r9:r10:r11:r12:r14:'
echo 'new r:>r=int32:'
echo 'int32 r:var/r=int32:'

echo ':name:reg128:q0:q1:q2:q3:q4:q5:q6:q7:q8:q9:q10:q11:q12:q13:q14:q15:'
echo 'new r:>r=reg128:'
echo 'free r:<r=reg128:'
echo 'int128 r:var/r=reg128:'
echo 'reg128 r:var/r=reg128:'
echo 'fp128 r:var/r=reg128:'

(
  echo 'startcode'
  echo 'asm/.fpu neon'
  echo 'asm/.text'
) | tr '\012' ':'; echo ':' | tr ':' '\012'

(
  echo 'enter f'
  echo 'enter/f'
  echo 'asm/.align 4'
  echo 'asm/.global _#f'
  echo 'asm/.global #f'
  echo 'asm/.type _#f STT_FUNC'
  echo 'asm/.type #f STT_FUNC'
  echo 'asm/_#f!colon'
  echo 'asm/#f!colon'
  echo 'asm/sub sp,sp,$!frame'
  echo '>input_0=int32#1'
  echo '>input_1=int32#2'
  echo '>input_2=int32#3'
  echo '>input_3=int32#4'
  echo '>input_4=stack32#arg1'
  echo '>input_5=stack32#arg2'
  echo '>input_6=stack32#arg3'
  echo '>input_7=stack32#arg4'
  echo '>caller_r4=int32#5'
  echo '>caller_r5=int32#6'
  echo '>caller_r6=int32#7'
  echo '>caller_r7=int32#8'
  echo '>caller_r8=int32#9'
  echo '>caller_r9=int32#10'
  echo '>caller_r10=int32#11'
  echo '>caller_r11=int32#12'
  echo '>caller_r14=int32#14'
  echo '>caller_q4=reg128#5'
  echo '>caller_q5=reg128#6'
  echo '>caller_q6=reg128#7'
  echo '>caller_q7=reg128#8'
) | tr '\012' ':'; echo ':' | tr ':' '\012'

(
  echo 'enternostack f'
  echo 'enter/f'
  echo 'asm/.align 4'
  echo 'asm/.global _#f'
  echo 'asm/.global #f'
  echo 'asm/.type _#f STT_FUNC'
  echo 'asm/.type #f STT_FUNC'
  echo 'asm/_#f!colon'
  echo 'asm/#f!colon'
  echo '>input_0=int32#1'
  echo '>input_1=int32#2'
  echo '>input_2=int32#3'
  echo '>input_3=int32#4'
  echo '>input_4=stack32#arg1'
  echo '>input_5=stack32#arg2'
  echo '>input_6=stack32#arg3'
  echo '>input_7=stack32#arg4'
  echo '>caller_r4=int32#5'
  echo '>caller_r5=int32#6'
  echo '>caller_r6=int32#7'
  echo '>caller_r7=int32#8'
  echo '>caller_r8=int32#9'
  echo '>caller_r9=int32#10'
  echo '>caller_r10=int32#11'
  echo '>caller_r11=int32#12'
  echo '>caller_r14=int32#14'
  echo '>caller_q4=reg128#5'
  echo '>caller_q5=reg128#6'
  echo '>caller_q6=reg128#7'
  echo '>caller_q7=reg128#8'
) | tr '\012' ':'; echo ':' | tr ':' '\012'

(
  echo 'qpushenter f'
  echo 'enter/f'
  echo 'asm/.align 4'
  echo 'asm/.global _#f'
  echo 'asm/.global #f'
  echo 'asm/.type _#f STT_FUNC'
  echo 'asm/.type #f STT_FUNC'
  echo 'asm/_#f!colon'
  echo 'asm/#f!colon'
  echo 'asm/vpush {q4,q5,q6,q7}'
  [ $stackalign ] && echo 'asm/mov r12,sp'
  echo 'asm/sub sp,sp,$!frame'
  [ $stackalign ] && echo 'asm/and sp,sp,$0xffffffe0'
  echo '>input_0=int32#1'
  echo '>input_1=int32#2'
  echo '>input_2=int32#3'
  echo '>input_3=int32#4'
  echo '>input_4=stack32#arg17'
  echo '>input_5=stack32#arg18'
  echo '>input_6=stack32#arg19'
  echo '>input_7=stack32#arg20'
  echo '>caller_r4=int32#5'
  echo '>caller_r5=int32#6'
  echo '>caller_r6=int32#7'
  echo '>caller_r7=int32#8'
  echo '>caller_r8=int32#9'
  echo '>caller_r9=int32#10'
  echo '>caller_r10=int32#11'
  echo '>caller_r11=int32#12'
  [ $stackalign ] && echo '>caller_r12=int32#13'
  echo '>caller_r14=int32#14'
) | tr '\012' ':'; echo ':' | tr ':' '\012'


(
  echo 'return'
  echo 'nofallthrough'
  echo 'asm/add sp,sp,$!frame'
  echo 'asm/bx lr'
  echo '<caller_r4=int32#5'
  echo '<caller_r5=int32#6'
  echo '<caller_r6=int32#7'
  echo '<caller_r7=int32#8'
  echo '<caller_r8=int32#9'
  echo '<caller_r9=int32#10'
  echo '<caller_r10=int32#11'
  echo '<caller_r11=int32#12'
  echo '<caller_r14=int32#14'
  echo "<caller_q4=reg128#5"
  echo "<caller_q5=reg128#6"
  echo "<caller_q6=reg128#7"
  echo "<caller_q7=reg128#8"
  echo 'leave'
) | tr '\012' ':'; echo ':' | tr ':' '\012'

(
  echo 'return r'
  echo 'nofallthrough'
  echo 'asm/add sp,sp,$!frame'
  echo 'asm/bx lr'
  echo '<r=int32#1'
  echo '<caller_r4=int32#5'
  echo '<caller_r5=int32#6'
  echo '<caller_r6=int32#7'
  echo '<caller_r7=int32#8'
  echo '<caller_r8=int32#9'
  echo '<caller_r9=int32#10'
  echo '<caller_r10=int32#11'
  echo '<caller_r11=int32#12'
  echo '<caller_r14=int32#14'
  echo "<caller_q4=reg128#5"
  echo "<caller_q5=reg128#6"
  echo "<caller_q6=reg128#7"
  echo "<caller_q7=reg128#8"
  echo 'leave'
) | tr '\012' ':'; echo ':' | tr ':' '\012'

(
  echo 'returnnostack'
  echo 'nofallthrough'
  echo 'asm/bx lr'
  echo '<caller_r4=int32#5'
  echo '<caller_r5=int32#6'
  echo '<caller_r6=int32#7'
  echo '<caller_r7=int32#8'
  echo '<caller_r8=int32#9'
  echo '<caller_r9=int32#10'
  echo '<caller_r10=int32#11'
  echo '<caller_r11=int32#12'
  echo '<caller_r14=int32#14'
  echo "<caller_q4=reg128#5"
  echo "<caller_q5=reg128#6"
  echo "<caller_q6=reg128#7"
  echo "<caller_q7=reg128#8"
  echo 'leave'
) | tr '\012' ':'; echo ':' | tr ':' '\012'

(
  echo 'returnnostack r'
  echo 'nofallthrough'
  echo 'asm/bx lr'
  echo '<r=int32#1'
  echo '<caller_r4=int32#5'
  echo '<caller_r5=int32#6'
  echo '<caller_r6=int32#7'
  echo '<caller_r7=int32#8'
  echo '<caller_r8=int32#9'
  echo '<caller_r9=int32#10'
  echo '<caller_r10=int32#11'
  echo '<caller_r11=int32#12'
  echo '<caller_r14=int32#14'
  echo "<caller_q4=reg128#5"
  echo "<caller_q5=reg128#6"
  echo "<caller_q6=reg128#7"
  echo "<caller_q7=reg128#8"
  echo 'leave'
) | tr '\012' ':'; echo ':' | tr ':' '\012'

(
  echo 'qpopreturn'
  echo 'nofallthrough'
  [ $stackalign ] && echo 'asm/mov sp,r12'
  [ $stackalign ] || echo 'asm/add sp,sp,$!frame'
  echo 'asm/vpop {q4,q5,q6,q7}'
  echo 'asm/bx lr'
  echo '<caller_r4=int32#5'
  echo '<caller_r5=int32#6'
  echo '<caller_r6=int32#7'
  echo '<caller_r7=int32#8'
  echo '<caller_r8=int32#9'
  echo '<caller_r9=int32#10'
  echo '<caller_r10=int32#11'
  echo '<caller_r11=int32#12'
  [ $stackalign ] && echo '<caller_r12=int32#13'
  echo '<caller_r14=int32#14'
  echo 'leave'
) | tr '\012' ':'; echo ':' | tr ':' '\012'


(
  echo 'qpopreturn r'
  echo 'nofallthrough'
  [ $stackalign ] && echo 'asm/mov sp,r12'
  [ $stackalign ] || echo 'asm/add sp,sp,$!frame'
  echo 'asm/vpop {q4,q5,q6,q7}'
  echo 'asm/bx lr'
  echo '<r=int32#1'
  echo '<caller_r4=int32#5'
  echo '<caller_r5=int32#6'
  echo '<caller_r6=int32#7'
  echo '<caller_r7=int32#8'
  echo '<caller_r8=int32#9'
  echo '<caller_r9=int32#10'
  echo '<caller_r10=int32#11'
  echo '<caller_r11=int32#12'
  [ $stackalign ] && echo '<caller_r12=int32#13'
  echo '<caller_r14=int32#14'
  echo 'leave'
) | tr '\012' ':'; echo ':' | tr ':' '\012'

echo 'constant s#:#s:asm/.p2align 4:asm/#s!colon:'
echo 'const32 n:#n:asm/.word #n:'
echo 'const128 n m o p:#n:#m:#o:#p:asm/.word #n,#m,#o,#p:'

echo ':stackalign:32:'
echo ':stackname:[sp,#:]:'
[ $stackalign ] && echo ':stackargname:[r12,#:]:'
[ $stackalign ] && echo ':rightbytes:0:'
# XXX have to upgrade stackargusescaller to handle r12
[ $stackalign ] || echo ':stackargname:[sp,#:]:'
[ $stackalign ] || echo ':rightbytes:!frame+0:'
echo ':stackbytes:stack64:8:'
echo 'stack64 r:var/r=stack64:'
echo 'new r:>r=stack64:'
echo ':stackbytes:stack32:4:'
echo 'stack32 r:var/r=stack32:'
echo 'new r:>r=stack32:'
echo ':stackbytes:stack128:16:'
echo 'stack128 r:var/r=stack128:'
echo 'new r:>r=stack128:'
echo ':stackbytes:stack256:32:'
echo 'stack256 r:var/r=stack256:'
echo 'new r:>r=stack256:'
echo ':stackbytes:stack512:64:'
echo 'stack512 r:var/r=stack512:'
echo 'new r:>r=stack512:'
echo ':stackbytes:stack1024:128:'
echo 'stack1024 r:var/r=stack1024:'
echo 'new r:>r=stack1024:'
echo ':stackbytes:stack1600:200:'
echo 'stack1600 r:var/r=stack1600:'
echo 'new r:>r=stack1600:'
echo ':stackbytes:stack3072:384:'
echo 'stack3072 r:var/r=stack3072:'
echo 'new r:>r=stack3072:'
echo ':stackpriority:stack64:'

echo ':flag:=:'
echo ':flag:signed<:'
echo ':flag:signed>:'
echo ':flag:unsigned<:'
echo ':flag:unsigned>:'
echo ':flag:negative:'
echo ':flag:overflow:'
echo ':flag:carry:'

echo 'cycles(r):>r=int32:asm/mrc p15, 0, >r, c9, c13, 0:'
echo 'f#:#f:label/f:asm/._#f!colon:'

./qhasm-arm-desc.py

echo 'r = s:>r=int32:<s=stack32:asm/ldr >r,<s:'
echo 's = r:<r=int32:>s=stack32:asm/str <r,>s:'
echo 'r = mem32[&s]:>r=int32:<s=stack64:asm/ldr >r,<s:'
echo 'r = mem32[&s+4]:>r=int32:<s=stack64:asm/ldr >r,!shift4<s:'
echo 'mem32[&s] = r:inplace>s=stack64:<r=int32:<s=stack64:asm/str <r,<s:'
echo 'mem32[&s+4] = r:inplace>s=stack64:<r=int32:<s=stack64:asm/str <r,!shift4<s:'

#echo 'r = &s:>r=int32:inplace>s=stack128:<s=stack128:asm/lea >r,<s:'
#echo 'r = &s:>r=int32:inplace>s=stack256:<s=stack256:asm/lea >r,<s:'
#echo 'r = &s:>r=int32:inplace>s=stack512:<s=stack512:asm/lea >r,<s:'
#echo 'r = &s:>r=int32:inplace>s=stack1024:<s=stack1024:asm/lea >r,<s:'
#echo 'r = &s:>r=int32:inplace>s=stack1600:<s=stack1600:asm/lea >r,<s:'
#echo 'r = &s:>r=int32:inplace>s=stack3072:<s=stack3072:asm/lea >r,<s:'

echo 'r = mem128[s]:>r=reg128:<s=int32:asm/vld1.8 {>r%bot->r%top},[<s]:'
echo 'r = mem128[s];s+=16:>r=reg128:<s=int32:asm/vld1.8 {>r%bot->r%top},[<s]!:'
echo 'r = mem128[s];s+=t:>r=reg128:<s=int32:<t=int32:asm/vld1.8 {>r%bot->r%top},[<s],<t:'
echo 'mem128[s] aligned= r:<r=reg128:<s=int32:asm/vst1.8 {<r%bot-<r%top},[<s,!colon 128]'
echo 'mem128[s] aligned= r;s+=16:<r=reg128:<s=int32:asm/vst1.8 {<r%bot-<r%top},[<s,!colon 128]!'
echo 'r aligned= mem128[s]:>r=reg128:<s=int32:asm/vld1.8 {>r%bot->r%top},[<s,!colon 128]'
echo 'r aligned= mem128[s];s+=16:>r=reg128:<s=int32:asm/vld1.8 {>r%bot->r%top},[<s,!colon 128]!:'
echo 'mem128[s] = r:<r=reg128:<s=int32:asm/vst1.8 {<r%bot-<r%top},[<s]:'
echo 'mem128[s] = r;s+=16:<r=reg128:<s=int32:asm/vst1.8 {<r%bot-<r%top},[<s]!:'
echo 'r = mem64[s]r[1]:<r=reg128:inplace>r=reg128:<s=int32:asm/vld1.8 {<r%bot},[<s]:'
echo 'r = mem64[s]r[1];s+=8:<r=reg128:inplace>r=reg128:<s=int32:asm/vld1.8 {<r%bot},[<s]!:'
echo 'r = r[0]mem64[s]:<r=reg128:inplace>r=reg128:<s=int32:asm/vld1.8 {<r%top},[<s]:'
echo 'r = r[0]mem64[s];s+=8:<r=reg128:inplace>r=reg128:<s=int32:asm/vld1.8 {<r%top},[<s]!:'
echo 'r aligned= mem64[s]r[1]:<r=reg128:inplace>r=reg128:<s=int32:asm/vld1.8 {<r%bot},[<s,!colon 64]:'
echo 'r aligned= r[0]mem64[s]:<r=reg128:inplace>r=reg128:<s=int32:asm/vld1.8 {<r%top},[<s,!colon 64]:'
echo 'r aligned= mem64[s]r[1];s+=8:<r=reg128:inplace>r=reg128:<s=int32:asm/vld1.8 {<r%bot},[<s,!colon 64]!:'
echo 'r aligned= mem64[s]r[1];s+=t:<r=reg128:inplace>r=reg128:<s=int32:<t=int32:asm/vld1.8 {<r%bot},[<s,!colon 64],<t:'
echo 'r aligned= r[0]mem64[s];s+=8:<r=reg128:inplace>r=reg128:<s=int32:asm/vld1.8 {<r%top},[<s,!colon 64]!:'
echo 'r aligned= r[0]mem64[s];s+=t:<r=reg128:inplace>r=reg128:<s=int32:<t=int32:asm/vld1.8 {<r%top},[<s,!colon 64],<t:'
echo 'mem64[s] = r[0]:<r=reg128:<s=int32:asm/vst1.8 <r%bot,[<s]:'
echo 'mem64[s] = r[0];s+=8:<r=reg128:<s=int32:asm/vst1.8 <r%bot,[<s]!:'
echo 'mem64[s] = r[1]:<r=reg128:<s=int32:asm/vst1.8 <r%top,[<s]:'
echo 'mem64[s] = r[1];s+=8:<r=reg128:<s=int32:asm/vst1.8 <r%top,[<s]!:'
echo 'mem64[s] aligned= r[0]:<r=reg128:<s=int32:asm/vst1.8 <r%bot,[<s,!colon 64]:'
echo 'mem64[s] aligned= r[0];s+=8:<r=reg128:<s=int32:asm/vst1.8 <r%bot,[<s,!colon 64]!:'
echo 'mem64[s] aligned= r[1]:<r=reg128:<s=int32:asm/vst1.8 <r%top,[<s,!colon 64]:'
echo 'mem64[s] aligned= r[1];s+=8:<r=reg128:<s=int32:asm/vst1.8 <r%top,[<s,!colon 64]!:'

echo 'r = s[0]r[1]:<r=reg128:inplace>r=reg128:<s=stack128:asm/vldr <r%bot,<s:'
echo 'r = r[0]s[1]:<r=reg128:inplace>r=reg128:<s=stack128:asm/vldr <r%top,!shift8<s:'
echo 's = r[0]s[1]:<r=reg128:<s=stack128:inplace>s=stack128:asm/vstr <r%bot,<s:'
echo 's = s[0]r[1]:<r=reg128:<s=stack128:inplace>s=stack128:asm/vstr <r%top,!shift8<s:'
#echo 'r = s:>r=reg128:<s=stack128:asm/vld1.8 {>r%bot->r%top},<s'
echo 'r[0] = s:<r=reg128:inplace>r=reg128:<s=stack64:asm/vldr <r%bot,<s'
echo 'r[1] = s:<r=reg128:inplace>r=reg128:<s=stack64:asm/vldr <r%top,<s'
#echo 'r = s:>r=stack128:<s=reg128:asm/vst1.8 {<s%bot-<s%top},>r'
echo 'r = s[0]:>r=stack64:<s=reg128:asm/vstr <s%bot,>r:'
echo 'r = s[1]:>r=stack64:<s=reg128:asm/vstr <s%top,>r:'

echo 'r ^= t:>r=reg128:<r=reg128:<t=reg128:asm/veor >r,<r,<t:'
echo 'r &= t:>r=reg128:<r=reg128:<t=reg128:asm/vand >r,<r,<t:'
echo 'r &= ~t:>r=reg128:<r=reg128:<t=reg128:asm/vbic >r,<r,<t:'
echo 'r |= t:>r=reg128:<r=reg128:<t=reg128:asm/vorr >r,<r,<t:'
echo 'r |= ~t:>r=reg128:<r=reg128:<t=reg128:asm/vorn >r,<r,<t:'
echo '4x r &= n:inplace>r=reg128:<r=reg128:#n:asm/vand.i32 <r,$#n:'
echo '4x r |= n:inplace>r=reg128:<r=reg128:#n:asm/vorr.i32 <r,$#n:'

echo 'r = s:>r=reg128:<s=reg128:asm/vmov >r,<s:'
echo 'r = s[0]r[1]:inplace>r=reg128:<r=reg128:<s=reg128:asm/vmov <r%bot,<s%bot'
echo 'r = r[0]s[0]:inplace>r=reg128:<r=reg128:<s=reg128:asm/vmov <r%top,<s%bot'
echo 'r = s[1]r[1]:inplace>r=reg128:<r=reg128:<s=reg128:asm/vmov <r%bot,<s%top'
echo 'r = r[0]s[1]:inplace>r=reg128:<r=reg128:<s=reg128:asm/vmov <r%top,<s%top'
echo 'r = ~s:>r=reg128:<s=reg128:asm/vmvn >r,<s:'
echo 'r = s ^ t:>r=reg128:<s=reg128:<t=reg128:asm/veor >r,<s,<t:'
echo 'r = s & t:>r=reg128:<s=reg128:<t=reg128:asm/vand >r,<s,<t:'
echo 'r = s & ~t:>r=reg128:<s=reg128:<t=reg128:asm/vbic >r,<s,<t:'
echo 'r = s | t:>r=reg128:<s=reg128:<t=reg128:asm/vorr >r,<s,<t:'
echo 'r = s | ~t:>r=reg128:<s=reg128:<t=reg128:asm/vorn >r,<s,<t:'
echo 's = (s & t) | (~s & u):inplace>s=reg128:<s=reg128:<t=reg128:<u=reg128:asm/vbsl <s,<t,<u:'
echo 'u = (s & t) | (~s & u):inplace>u=reg128:<s=reg128:<t=reg128:<u=reg128:asm/vbit <u,<t,<s:'
echo 't = (s & t) | (~s & u):inplace>t=reg128:<s=reg128:<t=reg128:<u=reg128:asm/vbif <t,<u,<s:'

echo '2x r = n:>r=reg128:#n:asm/vmov.i64 >r,$#n:'
echo '2x r = ~n:>r=reg128:#n:asm/vmvn.i64 >r,$#n:'
echo '4x r = n:>r=reg128:#n:asm/vmov.i32 >r,$#n:'
echo '4x r = s:>r=reg128:<s=int32:asm/vdup.i32 >r,<s:'
echo '4x r = ~n:>r=reg128:#n:asm/vmvn.i32 >r,$#n:'
echo 'r = s,s,s,s:>r=reg128:<s=int32:asm/vdup.i32 >r,<s:'
echo 'r = s,s,r[2,3]:inplace>r=reg128:<r=reg128:<s=int32:asm/vdup.i32 <r%bot,<s:'
echo 'r = r[0,1],s,s:inplace>r=reg128:<r=reg128:<s=int32:asm/vdup.i32 <r%top,<s:'
echo 'r = r[0,1],n,n:<r=reg128:inplace>r=reg128:#n:asm/vmov.i32 <r%top,$#n:'
echo 'r = n,n,r[2,3]:<r=reg128:inplace>r=reg128:#n:asm/vmov.i32 <r%bot,$#n:'
echo 'r = n,r[1]:<r=reg128:inplace>r=reg128:#n:asm/vmov.i64 <r%bot,$#n:'
echo 'r = r[0],n:<r=reg128:inplace>r=reg128:#n:asm/vmov.i64 <r%top,$#n:'
echo 'r = n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n:>r=reg128:#n:asm/vmov.i8 >r,$#n:'
echo 'r = s,r[1,2,3]:inplace>r=reg128:<r=reg128:<s=int32:asm/vmov.32 <r%bot[0],<s:'

echo '2x r += t:>r=reg128:<r=reg128:<t=reg128:asm/vadd.i64 >r,<r,<t:'
echo '2x r = s + t:>r=reg128:<s=reg128:<t=reg128:asm/vadd.i64 >r,<s,<t:'
echo '2x r -= t:>r=reg128:<r=reg128:<t=reg128:asm/vsub.i64 >r,<r,<t:'
echo '2x r = s - t:>r=reg128:<s=reg128:<t=reg128:asm/vsub.i64 >r,<s,<t:'
echo '4x r = -s:>r=reg128:<s=reg128:asm/vneg.s32 >r,<s:'
echo '4x r += t:>r=reg128:<r=reg128:<t=reg128:asm/vadd.i32 >r,<r,<t:'
echo '4x r -= t:>r=reg128:<r=reg128:<t=reg128:asm/vsub.i32 >r,<r,<t:'
echo '4x r unsigned>>= n:>r=reg128:<r=reg128:#n:asm/vshr.u32 >r,<r,$#n:'
echo '4x r <<= n:>r=reg128:<r=reg128:#n:asm/vshl.u32 >r,<r,$#n:'
echo '4x r = s + t:>r=reg128:<s=reg128:<t=reg128:asm/vadd.i32 >r,<s,<t:'
echo '4x r = s - t:>r=reg128:<s=reg128:<t=reg128:asm/vsub.i32 >r,<s,<t:'
echo '4x r = s << n:>r=reg128:<s=reg128:#n:asm/vshl.i32 >r,<s,$#n:'
echo '4x r = s << t:>r=reg128:<s=reg128:<t=reg128:#n:asm/vshl.u32 >r,<s,<t:'
echo '4x r = s unsigned>> n:>r=reg128:<s=reg128:#n:asm/vshr.u32 >r,<s,$#n:'
echo '4x r insert= s >> n:inplace>r=reg128:<r=reg128:<s=reg128:#n:asm/vsri.i32 <r,<s,$#n:'
echo '2x r unsigned>>= n:>r=reg128:<r=reg128:#n:asm/vshr.u64 >r,<r,$#n:'
echo '2x r signed>>= n:>r=reg128:<r=reg128:#n:asm/vshr.s64 >r,<r,$#n:'
echo '2x r <<= n:>r=reg128:<r=reg128:#n:asm/vshl.i64 >r,<r,$#n:'
echo '2x r = s unsigned>> n:>r=reg128:<s=reg128:#n:asm/vshr.u64 >r,<s,$#n:'
echo '2x r = s signed>> n:>r=reg128:<s=reg128:#n:asm/vshr.s64 >r,<s,$#n:'
echo '2x r = s << n:>r=reg128:<s=reg128:#n:asm/vshl.i64 >r,<s,$#n:'
echo 'r = t[0] << s[0],t[1] << s[1],r[2,3]:inplace>r=reg128:<r=reg128:<t=reg128:<s=reg128:asm/vshl.u32 <r%bot,<t%bot,<s%bot:'

( echo vmull =
) | while read insn accum
do
  echo "r[0,1] $accum s[0] unsigned* t[0];r[2,3] $accum s[1] unsigned* t[1]:>r=reg128:<s=reg128:<t=reg128:asm/$insn.u32 >r,<s%bot,<t%bot:"
  echo "r[0,1] $accum s[0] unsigned* t[2];r[2,3] $accum s[1] unsigned* t[3]:>r=reg128:<s=reg128:<t=reg128:asm/$insn.u32 >r,<s%bot,<t%top:"
  echo "r[0,1] $accum s[2] unsigned* t[0];r[2,3] $accum s[3] unsigned* t[1]:>r=reg128:<s=reg128:<t=reg128:asm/$insn.u32 >r,<s%top,<t%bot:"
  echo "r[0,1] $accum s[2] unsigned* t[2];r[2,3] $accum s[3] unsigned* t[3]:>r=reg128:<s=reg128:<t=reg128:asm/$insn.u32 >r,<s%top,<t%top:"
  echo "r[0,1] $accum s[0] signed* t[0];r[2,3] $accum s[1] signed* t[1]:>r=reg128:<s=reg128:<t=reg128:asm/$insn.s32 >r,<s%bot,<t%bot:"
  echo "r[0,1] $accum s[0] signed* t[2];r[2,3] $accum s[1] signed* t[3]:>r=reg128:<s=reg128:<t=reg128:asm/$insn.s32 >r,<s%bot,<t%top:"
  echo "r[0,1] $accum s[2] signed* t[0];r[2,3] $accum s[3] signed* t[1]:>r=reg128:<s=reg128:<t=reg128:asm/$insn.s32 >r,<s%top,<t%bot:"
  echo "r[0,1] $accum s[2] signed* t[2];r[2,3] $accum s[3] signed* t[3]:>r=reg128:<s=reg128:<t=reg128:asm/$insn.s32 >r,<s%top,<t%top:"
done

( echo vmlal +=
) | while read insn accum
do
  echo "r[0,1] $accum s[0] unsigned* t[0];r[2,3] $accum s[1] unsigned* t[1]:inplace>r=reg128:<r=reg128:<s=reg128:<t=reg128:asm/$insn.u32 <r,<s%bot,<t%bot:"
  echo "r[0,1] $accum s[0] unsigned* t[2];r[2,3] $accum s[1] unsigned* t[3]:inplace>r=reg128:<r=reg128:<s=reg128:<t=reg128:asm/$insn.u32 <r,<s%bot,<t%top:"
  echo "r[0,1] $accum s[2] unsigned* t[0];r[2,3] $accum s[3] unsigned* t[1]:inplace>r=reg128:<r=reg128:<s=reg128:<t=reg128:asm/$insn.u32 <r,<s%top,<t%bot:"
  echo "r[0,1] $accum s[2] unsigned* t[2];r[2,3] $accum s[3] unsigned* t[3]:inplace>r=reg128:<r=reg128:<s=reg128:<t=reg128:asm/$insn.u32 <r,<s%top,<t%top:"
  echo "r[0,1] $accum s[0] signed* t[0];r[2,3] $accum s[1] signed* t[1]:inplace>r=reg128:<r=reg128:<s=reg128:<t=reg128:asm/$insn.s32 <r,<s%bot,<t%bot:"
  echo "r[0,1] $accum s[0] signed* t[2];r[2,3] $accum s[1] signed* t[3]:inplace>r=reg128:<r=reg128:<s=reg128:<t=reg128:asm/$insn.s32 <r,<s%bot,<t%top:"
  echo "r[0,1] $accum s[2] signed* t[0];r[2,3] $accum s[3] signed* t[1]:inplace>r=reg128:<r=reg128:<s=reg128:<t=reg128:asm/$insn.s32 <r,<s%top,<t%bot:"
  echo "r[0,1] $accum s[2] signed* t[2];r[2,3] $accum s[3] signed* t[3]:inplace>r=reg128:<r=reg128:<s=reg128:<t=reg128:asm/$insn.s32 <r,<s%top,<t%top:"
done

echo "4x r = s * t:>r=reg128:<s=reg128:<t=reg128:asm/vmul.i32 >r,<s,<t:"
echo "r[0] = s[0] * t[0];r[1] = s[1] * t[1];r[2,3] = r[2,3]:>r=reg128:<s=reg128:<t=reg128:asm/vmul.i32 >r%bot,<s%bot,<t%bot:"
echo 'r[0,1] = r[0,1];r[2] = s[2] * t[2];r[3] = s[3] * t[3]:>r=reg128:<s=reg128:<t=reg128:asm/vmul.i32 >r%top,<s%top,<t%top:"'

echo 'r = r[0,1]s[0,1]:<r=reg128:inplace>r=reg128:<s=reg128:asm/vext.32 <r%top,<s%bot,<s%bot,$0:'
echo 'r = r[0,1]s[2,3]:<r=reg128:inplace>r=reg128:<s=reg128:asm/vext.32 <r%top,<s%top,<s%top,$0:'
echo 'r = s[0,1]r[2,3]:<r=reg128:inplace>r=reg128:<s=reg128:asm/vext.32 <r%bot,<s%bot,<s%bot,$0:'
echo 'r = s[2,3]r[2,3]:<r=reg128:inplace>r=reg128:<s=reg128:asm/vext.32 <r%bot,<s%top,<s%bot,$0:'
echo 'r = r[0,1]s[1]t[0]:<r=reg128:inplace>r=reg128:<s=reg128:<t=reg128:asm/vext.32 <r%top,<s%bot,<t%bot,$1:'
echo 'r = r[0,1]s[1]t[2]:<r=reg128:inplace>r=reg128:<s=reg128:<t=reg128:asm/vext.32 <r%top,<s%bot,<t%top,$1:'
echo 'r = r[0,1]s[3]t[0]:<r=reg128:inplace>r=reg128:<s=reg128:<t=reg128:asm/vext.32 <r%top,<s%top,<t%bot,$1:'
echo 'r = r[0,1]s[3]t[2]:<r=reg128:inplace>r=reg128:<s=reg128:<t=reg128:asm/vext.32 <r%top,<s%top,<t%top,$1:'
echo 'r = s[1]t[0]r[2,3]:<r=reg128:inplace>r=reg128:<s=reg128:<t=reg128:asm/vext.32 <r%bot,<s%bot,<t%bot,$1:'
echo 'r = s[3]t[0]r[2,3]:<r=reg128:inplace>r=reg128:<s=reg128:<t=reg128:asm/vext.32 <r%bot,<s%top,<t%bot,$1:'
echo 'r = s[1]t[2]r[2,3]:<r=reg128:inplace>r=reg128:<s=reg128:<t=reg128:asm/vext.32 <r%bot,<s%bot,<t%top,$1:'
echo 'r = s[1,2,3]t[0]:>r=reg128:<s=reg128:<t=reg128:asm/vext.32 >r,<s,<t,$1:'
echo 'r = r[1]r[0]:<r=reg128:inplace>r=reg128:asm/vswp <r%bot,<r%top:'
echo 'r = r[1,0]:<r=reg128:inplace>r=reg128:asm/vswp <r%bot,<r%top:'
echo 'r = r[2,3]r[0,1]:<r=reg128:inplace>r=reg128:asm/vswp <r%bot,<r%top:'
echo 'r s = r[0]s[0]r[1]s[1]:<r=reg128:inplace>r=reg128:<s=reg128:inplace>s=reg128:asm/vswp <s%bot,<r%top:'
echo 'r s = r[0]s[1]s[0]r[1]:<r=reg128:inplace>r=reg128:<s=reg128:inplace>s=reg128:asm/vswp <s%top,<r%top:'
echo 'r s = s[0]r[1]r[0]s[1]:<r=reg128:inplace>r=reg128:<s=reg128:inplace>s=reg128:asm/vswp <s%bot,<r%bot:'
echo 'r s = r[0]s[0]r[2]r[3]r[1]s[1]s[2]s[3]:<r=reg128:inplace>r=reg128:<s=reg128:inplace>s=reg128:asm/vtrn.32 <r%bot,<s%bot:'
echo 'r s = r[0]r[1]r[2]s[2]s[0]s[1]r[3]s[3]:<r=reg128:inplace>r=reg128:<s=reg128:inplace>s=reg128:asm/vtrn.32 <r%top,<s%top:'
echo 'r s = r[0]s[0]r[2]s[2]r[1]s[1]r[3]s[3]:<r=reg128:inplace>r=reg128:<s=reg128:inplace>s=reg128:asm/vtrn.32 <r,<s:'
echo 'r = r[0]r[2]r[1]r[3]:<r=reg128:inplace>r=reg128:asm/vtrn.32 <r%bot,<r%top:'
echo 'r = r[0,2,1,3]:<r=reg128:inplace>r=reg128:asm/vtrn.32 <r%bot,<r%top:'
echo 'r = r[0,4,2,6,1,5,3,7]:<r=reg128:inplace>r=reg128:asm/vtrn.16 <r%bot,<r%top:'
echo 'r = r[0,8,2,10,4,12,6,14,1,9,3,11,5,13,7,15]:<r=reg128:inplace>r=reg128:asm/vtrn.8 <r%bot,<r%top:'
echo 'r = s[2,3]t[0,1]:>r=reg128:<s=reg128:<t=reg128:asm/vext.32 >r,<s,<t,$2:'
echo 'r = s[3]t[0,1,2]:>r=reg128:<s=reg128:<t=reg128:asm/vext.32 >r,<s,<t,$3:'
echo 'r = s[3]t[0]r[2,3]:<r=reg128:inplace>r=reg128:<s=reg128:<t=reg128:asm/vext.32 <r%bot,<s%top,<t%bot,$1:'
echo 'r = s[3]t[2]r[2,3]:<r=reg128:inplace>r=reg128:<s=reg128:<t=reg128:asm/vext.32 <r%bot,<s%top,<t%top,$1:'
echo 'r = r[0]s[0]:<r=reg128:inplace>r=reg128:<s=reg128:asm/vmov <r%top,<s%bot:'
echo 'r = r[0]s[1]:<r=reg128:inplace>r=reg128:<s=reg128:asm/vmov <r%top,<s%top:'
echo 'r = s[0]r[1]:<r=reg128:inplace>r=reg128:<s=reg128:asm/vmov <r%bot,<s%bot:'
echo 'r = s[1]r[1]:<r=reg128:inplace>r=reg128:<s=reg128:asm/vmov <r%bot,<s%top:'

echo 'r = r[1]r[0]r[2,3]:<r=reg128:inplace>r=reg128:asm/vrev64.i32 <r%bot,<r%bot:'
echo 'r = r[0,1]r[3]r[2]:<r=reg128:inplace>r=reg128:asm/vrev64.i32 <r%top,<r%top:'
echo 's = r[1]r[0]r[3]r[2]:<r=reg128:>s=reg128:asm/vrev64.i32 >s,<r:'
echo 's = r[1]r[0]r[3]r[2]r[5]r[4]r[7]r[6]:<r=reg128:>s=reg128:asm/vrev32.i16 >s,<r:'
echo 's = r[1]r[0]r[3]r[2]r[5]r[4]r[7]r[6]r[9]r[8]r[11]r[10]r[13]r[12]r[15]r[14]:<r=reg128:>s=reg128:asm/vrev16.i8 >s,<r:'
echo 's = r[7,6,5,4,3,2,1,0,15,14,13,12,11,10,9,8]:<r=reg128:>s=reg128:asm/vrev64.i8 >s,<r:'
echo 's = r[3,2,1,0,7,6,5,4,11,10,9,8,15,14,13,12]:<r=reg128:>s=reg128:asm/vrev32.i8 >s,<r:'

echo 'r[0,1,2,3] s[0,1,2,3] = r[0,2]s[1,3] r[1,3]s[0,2]:inplace>r=reg128:inplace>s=reg128:<r=reg128:<s=reg128:asm/vuzp.i32 <r,<s:'
echo 'r[0,1,2,3] s[0,1,2,3] = r[0]s[0]r[1]s[1] r[2]s[2]r[3]s[3]:inplace>r=reg128:inplace>s=reg128:<r=reg128:<s=reg128:asm/vzip.i32 <r,<s:'
echo 'r[0,1,2,3]            = r[0]r[2]r[1]r[3]:inplace>r=reg128:<r=reg128:<s=reg128:asm/vzip.i32 <r%bot,<r%top:'

echo 'r = s[t[0,1,2,3,4,5,6,7]]r[8,9,10,11,12,13,14,15]:>r=reg128:<s=reg128:<t=reg128:asm/vtbl.8 >r%bot,{<s%bot},<t%bot:'
echo 'r = r[0,1,2,3,4,5,6,7] s[8+t[8,9,10,11,12,13,14,15]]:>r=reg128:<s=reg128:<t=reg128:asm/vtbl.8 >r%top,{<s%top},<t%top:'

# Again: discuss syntax
echo 'push r s t u:<r=reg128#5:<s=reg128#6:<t=reg128#7:<u=reg128#8:asm/vpush {<r,<s,<t,<u}:'
echo 'pop r s t u:>r=reg128#5:>s=reg128#6:>t=reg128#7:>u=reg128#8:asm/vpop {>r,>s,>t,>u}:'

# Is it worth extending this section or should we just support 64-bit variables?
echo 'r = r[0],s[1] + t[1]:<r=reg128:inplace>r=reg128:<s=reg128:<t=reg128:asm/vadd.i64 <r%top,<s%top,<t%top:'
echo 'r = r[0],s[1] + t[0]:<r=reg128:inplace>r=reg128:<s=reg128:<t=reg128:asm/vadd.i64 <r%top,<s%top,<t%bot:'
echo 'r = s[0] + t[0],r[1]:<r=reg128:inplace>r=reg128:<s=reg128:<t=reg128:asm/vadd.i64 <r%bot,<s%bot,<t%bot:'
echo 'r = r[0],s[1] signed>> n:<r=reg128:inplace>r=reg128:<s=reg128:#n:asm/vshr.s64 <r%top,<s%top,$#n:'
echo 'r = s[0] signed>> n,r[1]:<r=reg128:inplace>r=reg128:<s=reg128:#n:asm/vshr.s64 <r%bot,<s%bot,$#n:'
echo 'r = r[0],s[1] << n:<r=reg128:inplace>r=reg128:<s=reg128:#n:asm/vshl.i64 <r%top,<s%top,$#n:'
echo 'r = s[0] << n,r[1]:<r=reg128:inplace>r=reg128:<s=reg128:#n:asm/vshl.i64 <r%bot,<s%bot,$#n:'
echo 'r = s[0] + t[1],r[1]:<r=reg128:inplace>r=reg128:<s=reg128:<t=reg128:asm/vadd.i64 <r%bot,<s%bot,<t%top:'
echo 'r = r[0],s[1] - t[1]:<r=reg128:inplace>r=reg128:<s=reg128:<t=reg128:asm/vsub.i64 <r%top,<s%top,<t%top:'
echo 'r = s[0] - t[0],r[1]:<r=reg128:inplace>r=reg128:<s=reg128:<t=reg128:asm/vsub.i64 <r%bot,<s%bot,<t%bot:'

#s = s[0],t[1] << 4

# Required for NEON poly1305, discuss and fix syntax!
echo '2x r[0] <<= n:<r=reg128:>r=reg128:#n:asm/vshl.i32 >r%bot,<r%bot,$#n:'
echo '2x r[1] <<= n:<r=reg128:>r=reg128:#n:asm/vshl.i32 >r%top,<r%top,$#n:'
echo '2x r[0] unsigned>>= n:<r=reg128:>r=reg128:#n:asm/vshr.u32 >r%bot,<r%bot,$#n:'
echo '2x r[1] unsigned>>= n:<r=reg128:>r=reg128:#n:asm/vshr.u32 >r%top,<r%top,$#n:'
echo '2x s[0] = r[0] << n:<r=reg128:>s=reg128:#n:asm/vshl.i32 >s%bot,<r%bot,$#n:'
echo '2x s[1] = r[1] << n:<r=reg128:>s=reg128:#n:asm/vshl.i32 >s%top,<r%top,$#n:'
echo '2x s[0] = r[0] unsigned>> n:<r=reg128:>s=reg128:#n:asm/vshr.u32 >s%bot,<r%bot,$#n:'
echo '2x s[1] = r[1] unsigned>> n:<r=reg128:>s=reg128:#n:asm/vshr.u32 >s%top,<r%top,$#n:'
echo '2x s[1] = r[0] unsigned>> n:<r=reg128:>s=reg128:#n:asm/vshr.u32 >s%top,<r%bot,$#n:'
echo '2x s[0] = r[1] unsigned>> n:<r=reg128:>s=reg128:#n:asm/vshr.u32 >s%bot,<r%top,$#n:'
echo 'r[0] ^= t[0]:>r=reg128:<r=reg128:<t=reg128:asm/veor >r%bot,<r%bot,<t%bot:'
echo 'r[1] ^= t[0]:>r=reg128:<r=reg128:<t=reg128:asm/veor >r%top,<r%top,<t%bot:'
echo 'r[0] ^= t[1]:>r=reg128:<r=reg128:<t=reg128:asm/veor >r%bot,<r%bot,<t%top:'
echo 'r[1] ^= t[1]:>r=reg128:<r=reg128:<t=reg128:asm/veor >r%top,<r%top,<t%top:'

echo 's[0,1] = r[0]<<n; s[2,3] = r[1]<<n:>s=reg128:<r=reg128:#n:asm/vshll.u32 >s,<r%bot,$#n:'
echo 's[0,1] = r[2]<<n; s[2,3] = r[3]<<n:>s=reg128:<r=reg128:#n:asm/vshll.u32 >s,<r%top,$#n:'

echo 's[0] = r[0,1] unsigned>> n; s[1] = r[2,3] unsigned>> n:inplace>s=reg128:<s=reg128:<r=reg128:#n:asm/vshrn.u64 <s%bot,<r,$#n:'
echo 's[2] = r[0,1] unsigned>> n; s[3] = r[2,3] unsigned>> n:inplace>s=reg128:<s=reg128:<r=reg128:#n:asm/vshrn.u64 <s%top,<r,$#n:'


echo ':'

echo 'int32 input_0'
echo 'int32 input_1'
echo 'int32 input_2'
echo 'int32 input_3'
echo 'stack32 input_4'
echo 'stack32 input_5'
echo 'stack32 input_6'
echo 'stack32 input_7'
echo 'int32 caller_r4'
echo 'int32 caller_r5'
echo 'int32 caller_r6'
echo 'int32 caller_r7'
echo 'int32 caller_r8'
echo 'int32 caller_r9'
echo 'int32 caller_r10'
echo 'int32 caller_r11'
echo 'int32 caller_r12'
echo 'int32 caller_r14'
echo 'reg128 caller_q4'
echo 'reg128 caller_q5'
echo 'reg128 caller_q6'
echo 'reg128 caller_q7'
echo 'startcode'
